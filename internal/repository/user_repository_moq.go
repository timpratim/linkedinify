// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"context"
	"github.com/google/uuid"
	"github.com/you/linkedinify/internal/model"
	"sync"
)

// Ensure, that UserRepositoryMock does implement UserRepository.
// If this is not the case, regenerate this file with moq.
var _ UserRepository = &UserRepositoryMock{}

// UserRepositoryMock is a mock implementation of UserRepository.
//
//	func TestSomethingThatUsesUserRepository(t *testing.T) {
//
//		// make and configure a mocked UserRepository
//		mockedUserRepository := &UserRepositoryMock{
//			CreateFunc: func(ctx context.Context, u *model.User) error {
//				panic("mock out the Create method")
//			},
//			FindByEmailFunc: func(ctx context.Context, email string) (*model.User, error) {
//				panic("mock out the FindByEmail method")
//			},
//			FindByIDFunc: func(ctx context.Context, id uuid.UUID) (*model.User, error) {
//				panic("mock out the FindByID method")
//			},
//		}
//
//		// use mockedUserRepository in code that requires UserRepository
//		// and then make assertions.
//
//	}
type UserRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, u *model.User) error

	// FindByEmailFunc mocks the FindByEmail method.
	FindByEmailFunc func(ctx context.Context, email string) (*model.User, error)

	// FindByIDFunc mocks the FindByID method.
	FindByIDFunc func(ctx context.Context, id uuid.UUID) (*model.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// U is the u argument value.
			U *model.User
		}
		// FindByEmail holds details about calls to the FindByEmail method.
		FindByEmail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
		}
		// FindByID holds details about calls to the FindByID method.
		FindByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
	}
	lockCreate      sync.RWMutex
	lockFindByEmail sync.RWMutex
	lockFindByID    sync.RWMutex
}

// Create calls CreateFunc.
func (mock *UserRepositoryMock) Create(ctx context.Context, u *model.User) error {
	if mock.CreateFunc == nil {
		panic("UserRepositoryMock.CreateFunc: method is nil but UserRepository.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		U   *model.User
	}{
		Ctx: ctx,
		U:   u,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, u)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedUserRepository.CreateCalls())
func (mock *UserRepositoryMock) CreateCalls() []struct {
	Ctx context.Context
	U   *model.User
} {
	var calls []struct {
		Ctx context.Context
		U   *model.User
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// FindByEmail calls FindByEmailFunc.
func (mock *UserRepositoryMock) FindByEmail(ctx context.Context, email string) (*model.User, error) {
	if mock.FindByEmailFunc == nil {
		panic("UserRepositoryMock.FindByEmailFunc: method is nil but UserRepository.FindByEmail was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Email string
	}{
		Ctx:   ctx,
		Email: email,
	}
	mock.lockFindByEmail.Lock()
	mock.calls.FindByEmail = append(mock.calls.FindByEmail, callInfo)
	mock.lockFindByEmail.Unlock()
	return mock.FindByEmailFunc(ctx, email)
}

// FindByEmailCalls gets all the calls that were made to FindByEmail.
// Check the length with:
//
//	len(mockedUserRepository.FindByEmailCalls())
func (mock *UserRepositoryMock) FindByEmailCalls() []struct {
	Ctx   context.Context
	Email string
} {
	var calls []struct {
		Ctx   context.Context
		Email string
	}
	mock.lockFindByEmail.RLock()
	calls = mock.calls.FindByEmail
	mock.lockFindByEmail.RUnlock()
	return calls
}

// FindByID calls FindByIDFunc.
func (mock *UserRepositoryMock) FindByID(ctx context.Context, id uuid.UUID) (*model.User, error) {
	if mock.FindByIDFunc == nil {
		panic("UserRepositoryMock.FindByIDFunc: method is nil but UserRepository.FindByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindByID.Lock()
	mock.calls.FindByID = append(mock.calls.FindByID, callInfo)
	mock.lockFindByID.Unlock()
	return mock.FindByIDFunc(ctx, id)
}

// FindByIDCalls gets all the calls that were made to FindByID.
// Check the length with:
//
//	len(mockedUserRepository.FindByIDCalls())
func (mock *UserRepositoryMock) FindByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindByID.RLock()
	calls = mock.calls.FindByID
	mock.lockFindByID.RUnlock()
	return calls
}
