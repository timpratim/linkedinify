// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"context"
	"github.com/google/uuid"
	"github.com/you/linkedinify/internal/model"
	"sync"
)

// Ensure, that PostRepositoryMock does implement PostRepository.
// If this is not the case, regenerate this file with moq.
var _ PostRepository = &PostRepositoryMock{}

// PostRepositoryMock is a mock implementation of PostRepository.
//
//	func TestSomethingThatUsesPostRepository(t *testing.T) {
//
//		// make and configure a mocked PostRepository
//		mockedPostRepository := &PostRepositoryMock{
//			ListByUserFunc: func(ctx context.Context, userID uuid.UUID, page int, pageSize int) ([]model.LinkedInPost, error) {
//				panic("mock out the ListByUser method")
//			},
//			SaveFunc: func(ctx context.Context, p *model.LinkedInPost) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedPostRepository in code that requires PostRepository
//		// and then make assertions.
//
//	}
type PostRepositoryMock struct {
	// ListByUserFunc mocks the ListByUser method.
	ListByUserFunc func(ctx context.Context, userID uuid.UUID, page int, pageSize int) ([]model.LinkedInPost, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, p *model.LinkedInPost) error

	// calls tracks calls to the methods.
	calls struct {
		// ListByUser holds details about calls to the ListByUser method.
		ListByUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID uuid.UUID
			// Page is the page argument value.
			Page int
			// PageSize is the pageSize argument value.
			PageSize int
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// P is the p argument value.
			P *model.LinkedInPost
		}
	}
	lockListByUser sync.RWMutex
	lockSave       sync.RWMutex
}

// ListByUser calls ListByUserFunc.
func (mock *PostRepositoryMock) ListByUser(ctx context.Context, userID uuid.UUID, page int, pageSize int) ([]model.LinkedInPost, error) {
	if mock.ListByUserFunc == nil {
		panic("PostRepositoryMock.ListByUserFunc: method is nil but PostRepository.ListByUser was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		UserID   uuid.UUID
		Page     int
		PageSize int
	}{
		Ctx:      ctx,
		UserID:   userID,
		Page:     page,
		PageSize: pageSize,
	}
	mock.lockListByUser.Lock()
	mock.calls.ListByUser = append(mock.calls.ListByUser, callInfo)
	mock.lockListByUser.Unlock()
	return mock.ListByUserFunc(ctx, userID, page, pageSize)
}

// ListByUserCalls gets all the calls that were made to ListByUser.
// Check the length with:
//
//	len(mockedPostRepository.ListByUserCalls())
func (mock *PostRepositoryMock) ListByUserCalls() []struct {
	Ctx      context.Context
	UserID   uuid.UUID
	Page     int
	PageSize int
} {
	var calls []struct {
		Ctx      context.Context
		UserID   uuid.UUID
		Page     int
		PageSize int
	}
	mock.lockListByUser.RLock()
	calls = mock.calls.ListByUser
	mock.lockListByUser.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *PostRepositoryMock) Save(ctx context.Context, p *model.LinkedInPost) error {
	if mock.SaveFunc == nil {
		panic("PostRepositoryMock.SaveFunc: method is nil but PostRepository.Save was just called")
	}
	callInfo := struct {
		Ctx context.Context
		P   *model.LinkedInPost
	}{
		Ctx: ctx,
		P:   p,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, p)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedPostRepository.SaveCalls())
func (mock *PostRepositoryMock) SaveCalls() []struct {
	Ctx context.Context
	P   *model.LinkedInPost
} {
	var calls []struct {
		Ctx context.Context
		P   *model.LinkedInPost
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
