// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ai

import (
	"context"
	"sync"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked Client
//		mockedClient := &ClientMock{
//			TransformFunc: func(ctx context.Context, text string) (string, error) {
//				panic("mock out the Transform method")
//			},
//		}
//
//		// use mockedClient in code that requires Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// TransformFunc mocks the Transform method.
	TransformFunc func(ctx context.Context, text string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Transform holds details about calls to the Transform method.
		Transform []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Text is the text argument value.
			Text string
		}
	}
	lockTransform sync.RWMutex
}

// Transform calls TransformFunc.
func (mock *ClientMock) Transform(ctx context.Context, text string) (string, error) {
	if mock.TransformFunc == nil {
		panic("ClientMock.TransformFunc: method is nil but Client.Transform was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Text string
	}{
		Ctx:  ctx,
		Text: text,
	}
	mock.lockTransform.Lock()
	mock.calls.Transform = append(mock.calls.Transform, callInfo)
	mock.lockTransform.Unlock()
	return mock.TransformFunc(ctx, text)
}

// TransformCalls gets all the calls that were made to Transform.
// Check the length with:
//
//	len(mockedClient.TransformCalls())
func (mock *ClientMock) TransformCalls() []struct {
	Ctx  context.Context
	Text string
} {
	var calls []struct {
		Ctx  context.Context
		Text string
	}
	mock.lockTransform.RLock()
	calls = mock.calls.Transform
	mock.lockTransform.RUnlock()
	return calls
}
