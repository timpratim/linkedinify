// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"sync"
)

// Ensure, that AuthServiceInteractorMock does implement AuthServiceInteractor.
// If this is not the case, regenerate this file with moq.
var _ AuthServiceInteractor = &AuthServiceInteractorMock{}

// AuthServiceInteractorMock is a mock implementation of AuthServiceInteractor.
//
//	func TestSomethingThatUsesAuthServiceInteractor(t *testing.T) {
//
//		// make and configure a mocked AuthServiceInteractor
//		mockedAuthServiceInteractor := &AuthServiceInteractorMock{
//			LoginFunc: func(ctx context.Context, email string, password string) (string, error) {
//				panic("mock out the Login method")
//			},
//			RegisterFunc: func(ctx context.Context, email string, password string) (string, error) {
//				panic("mock out the Register method")
//			},
//		}
//
//		// use mockedAuthServiceInteractor in code that requires AuthServiceInteractor
//		// and then make assertions.
//
//	}
type AuthServiceInteractorMock struct {
	// LoginFunc mocks the Login method.
	LoginFunc func(ctx context.Context, email string, password string) (string, error)

	// RegisterFunc mocks the Register method.
	RegisterFunc func(ctx context.Context, email string, password string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Login holds details about calls to the Login method.
		Login []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
			// Password is the password argument value.
			Password string
		}
		// Register holds details about calls to the Register method.
		Register []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
			// Password is the password argument value.
			Password string
		}
	}
	lockLogin    sync.RWMutex
	lockRegister sync.RWMutex
}

// Login calls LoginFunc.
func (mock *AuthServiceInteractorMock) Login(ctx context.Context, email string, password string) (string, error) {
	if mock.LoginFunc == nil {
		panic("AuthServiceInteractorMock.LoginFunc: method is nil but AuthServiceInteractor.Login was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Email    string
		Password string
	}{
		Ctx:      ctx,
		Email:    email,
		Password: password,
	}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	return mock.LoginFunc(ctx, email, password)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//
//	len(mockedAuthServiceInteractor.LoginCalls())
func (mock *AuthServiceInteractorMock) LoginCalls() []struct {
	Ctx      context.Context
	Email    string
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		Email    string
		Password string
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *AuthServiceInteractorMock) Register(ctx context.Context, email string, password string) (string, error) {
	if mock.RegisterFunc == nil {
		panic("AuthServiceInteractorMock.RegisterFunc: method is nil but AuthServiceInteractor.Register was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Email    string
		Password string
	}{
		Ctx:      ctx,
		Email:    email,
		Password: password,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	return mock.RegisterFunc(ctx, email, password)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//
//	len(mockedAuthServiceInteractor.RegisterCalls())
func (mock *AuthServiceInteractorMock) RegisterCalls() []struct {
	Ctx      context.Context
	Email    string
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		Email    string
		Password string
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}
