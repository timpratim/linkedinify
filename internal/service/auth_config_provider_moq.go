// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"sync"
)

// Ensure, that AuthConfigProviderMock does implement AuthConfigProvider.
// If this is not the case, regenerate this file with moq.
var _ AuthConfigProvider = &AuthConfigProviderMock{}

// AuthConfigProviderMock is a mock implementation of AuthConfigProvider.
//
//	func TestSomethingThatUsesAuthConfigProvider(t *testing.T) {
//
//		// make and configure a mocked AuthConfigProvider
//		mockedAuthConfigProvider := &AuthConfigProviderMock{
//			GetJWTSecretFunc: func() []byte {
//				panic("mock out the GetJWTSecret method")
//			},
//		}
//
//		// use mockedAuthConfigProvider in code that requires AuthConfigProvider
//		// and then make assertions.
//
//	}
type AuthConfigProviderMock struct {
	// GetJWTSecretFunc mocks the GetJWTSecret method.
	GetJWTSecretFunc func() []byte

	// calls tracks calls to the methods.
	calls struct {
		// GetJWTSecret holds details about calls to the GetJWTSecret method.
		GetJWTSecret []struct {
		}
	}
	lockGetJWTSecret sync.RWMutex
}

// GetJWTSecret calls GetJWTSecretFunc.
func (mock *AuthConfigProviderMock) GetJWTSecret() []byte {
	if mock.GetJWTSecretFunc == nil {
		panic("AuthConfigProviderMock.GetJWTSecretFunc: method is nil but AuthConfigProvider.GetJWTSecret was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetJWTSecret.Lock()
	mock.calls.GetJWTSecret = append(mock.calls.GetJWTSecret, callInfo)
	mock.lockGetJWTSecret.Unlock()
	return mock.GetJWTSecretFunc()
}

// GetJWTSecretCalls gets all the calls that were made to GetJWTSecret.
// Check the length with:
//
//	len(mockedAuthConfigProvider.GetJWTSecretCalls())
func (mock *AuthConfigProviderMock) GetJWTSecretCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetJWTSecret.RLock()
	calls = mock.calls.GetJWTSecret
	mock.lockGetJWTSecret.RUnlock()
	return calls
}
